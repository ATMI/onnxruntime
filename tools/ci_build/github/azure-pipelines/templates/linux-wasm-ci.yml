parameters:
- name: CommitOverride
  type: boolean
  default: false

- name: BuildConfig
  type: string
  default: 'Debug'

- name: ExtraBuildArgs
  type: string
  default: ''

- name: PoolName
  type: string
  default: 'onnxruntime-Ubuntu2204-AMD-CPU'

- name: SkipPublish
  type: boolean
  default: false

- name: TimeoutInMinutes
  default: 180

- name: BuildJsep
  type: boolean
  default: false

# In fact, it's only used on Linux for compiler cache.
- name: BuildStaticLib
  type: boolean
  default: false

- name: BuildTraining
  type: boolean
  default: true

- name: WithCache
  type: boolean
  default: false

jobs:
- job: build_WASM
  pool:
    name: ${{ parameters.PoolName }}
  variables:
    buildArch: x64
    CommonBuildArgs: '--parallel --config ${{ parameters.BuildConfig }} --skip_submodule_sync --build_wasm ${{ parameters.ExtraBuildArgs }}'
    runCodesignValidationInjection: false
    TODAY: $[format('{0:dd}{0:MM}{0:yyyy}', pipeline.startTime)]
    ORT_CACHE_DIR: $(Agent.TempDirectory)/ort_ccache
  timeoutInMinutes: ${{ parameters.TimeoutInMinutes }}
  workspace:
    clean: all
  steps:
  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()
  - checkout: self
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '__commit'
      path: $(Pipeline.Workspace)
    displayName: 'Get commit SHA'
    condition: eq('${{ parameters.CommitOverride }}', 'true')
  - script: |
     export __commit__=<$(Pipeline.Workspace)/__commit.txt
     git fetch origin +$__commit__:refs/remotes/origin/$__commit__
     git checkout --force $__commit__
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Read commit SHA and checkout'
    condition: eq('${{ parameters.CommitOverride }}', 'true')
  - script: |
     git submodule sync --recursive
     git submodule update --init --recursive
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Checkout submodules'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
      addToPath: true
      architecture: $(buildArch)
  - template: download-deps.yml

  - task: PythonScript@0
    displayName: 'Update deps.txt'
    inputs:
      scriptPath: $(Build.SourcesDirectory)/tools/ci_build/replace_urls_in_deps.py
      arguments: --new_dir $(Build.BinariesDirectory)/deps
      workingDirectory: $(Build.BinariesDirectory)

  - ${{if eq(parameters.WithCache, true)}}:
      - script: |
          set -ex
          cd '$(Build.SourcesDirectory)/cmake/external/emsdk'
          ./emsdk install 3.1.51 ccache-git-emscripten-64bit
          ./emsdk activate 3.1.51 ccache-git-emscripten-64bit
        displayName: 'emsdk install and activate ccache for emscripten'
  - ${{if eq(parameters.WithCache, false)}}:
      - script: |
          set -ex
          cd '$(Build.SourcesDirectory)/cmake/external/emsdk'
          ./emsdk install 3.1.51
          ./emsdk activate 3.1.51
        displayName: 'emsdk install and activate ccache for emscripten'

  - template: build-linux-wasm-step.yml
    parameters:
      Today: $(Today)
      ${{ if eq(parameters.BuildStaticLib, true)}}:
        AdditionalKey: wasm_simd_threads | ${{ parameters.BuildConfig }} | static
      ${{ else }}:
        AdditionalKey: wasm_simd_threads | ${{ parameters.BuildConfig }}
      CacheDir: $(ORT_CACHE_DIR)/wasm_simd_threads
      Arguments: '$(CommonBuildArgs) --build_dir $(Build.BinariesDirectory)/wasm_simd_threads --enable_wasm_simd --enable_wasm_threads --wasm_run_tests_in_browser'
      DisplayName: 'Build and test (browser) (simd + threads)'
      WithCache: ${{ parameters.WithCache }}

